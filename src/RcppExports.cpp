// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// GibbsSamplingAbundance
List GibbsSamplingAbundance(DataFrame DATA, int nCommunity, NumericVector beta, double gamma, int nGibbs, bool logLikelihoodAndPrior, bool display_progress);
RcppExport SEXP Rlda_GibbsSamplingAbundance(SEXP DATASEXP, SEXP nCommunitySEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP nGibbsSEXP, SEXP logLikelihoodAndPriorSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< int >::type nCommunity(nCommunitySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type nGibbs(nGibbsSEXP);
    Rcpp::traits::input_parameter< bool >::type logLikelihoodAndPrior(logLikelihoodAndPriorSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(GibbsSamplingAbundance(DATA, nCommunity, beta, gamma, nGibbs, logLikelihoodAndPrior, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// GibbsSamplingBinomial
List GibbsSamplingBinomial(DataFrame DATA, DataFrame POP, int nCommunity, double alpha0, double alpha1, double gamma, int nGibbs, bool logLikelihoodAndPrior, bool display_progress);
RcppExport SEXP Rlda_GibbsSamplingBinomial(SEXP DATASEXP, SEXP POPSEXP, SEXP nCommunitySEXP, SEXP alpha0SEXP, SEXP alpha1SEXP, SEXP gammaSEXP, SEXP nGibbsSEXP, SEXP logLikelihoodAndPriorSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< DataFrame >::type POP(POPSEXP);
    Rcpp::traits::input_parameter< int >::type nCommunity(nCommunitySEXP);
    Rcpp::traits::input_parameter< double >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type nGibbs(nGibbsSEXP);
    Rcpp::traits::input_parameter< bool >::type logLikelihoodAndPrior(logLikelihoodAndPriorSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(GibbsSamplingBinomial(DATA, POP, nCommunity, alpha0, alpha1, gamma, nGibbs, logLikelihoodAndPrior, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// GibbsSamplingPresence
List GibbsSamplingPresence(DataFrame DATA, int nCommunity, double alpha0, double alpha1, double gamma, int nGibbs, bool logLikelihoodAndPrior, bool display_progress);
RcppExport SEXP Rlda_GibbsSamplingPresence(SEXP DATASEXP, SEXP nCommunitySEXP, SEXP alpha0SEXP, SEXP alpha1SEXP, SEXP gammaSEXP, SEXP nGibbsSEXP, SEXP logLikelihoodAndPriorSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< int >::type nCommunity(nCommunitySEXP);
    Rcpp::traits::input_parameter< double >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type nGibbs(nGibbsSEXP);
    Rcpp::traits::input_parameter< bool >::type logLikelihoodAndPrior(logLikelihoodAndPriorSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(GibbsSamplingPresence(DATA, nCommunity, alpha0, alpha1, gamma, nGibbs, logLikelihoodAndPrior, display_progress));
    return rcpp_result_gen;
END_RCPP
}
