#Execute the LDA for the Binomial entry
res<-GibbsSamplingBinomial(sp500[,1:33],spSize[,1:33],5,
alpha0,alpha1,gamma,
1000,TRUE,FALSE)
#Read the SP500 data
data(sp500)
sp500<-na.omit(sp500)
devtools::use_data(sp500)
devtools::use_data(sp500,overwrite = TRUE)
library(Rlda)
#Read the SP500 data
data(sp500)
#Create size
spSize<-as.data.frame(matrix(100,
ncol=ncol(sp500),
nrow=nrow(sp500)))
library(Rlda)
load("C:/Users/p.albuquerque/Dropbox/Projetos/P贸s-doutorado EUA/Produtos/Bayesian LDA for fuzzy clustering analysis/Vignette/Example2.Rdata")
#Set seed
set.seed(5874)
#Hyperparameters for each prior distribution
gamma <-0.01
alpha0<-0.01
alpha1<-0.01
#Execute the LDA for the Binomial entry
res<-GibbsSamplingBinomial(sp500,spSize,10,
alpha0,alpha1,gamma,
5000,TRUE,FALSE)
library(Rlda)
#Read the SP500 data
data(sp500)
#Create size
spSize<-as.data.frame(matrix(100,
ncol=ncol(sp500),
nrow=nrow(sp500)))
#Set seed
set.seed(5874)
#Hyperparameters for each prior distribution
gamma <-0.01
alpha0<-0.01
alpha1<-0.01
#Execute the LDA for the Binomial entry
res<-GibbsSamplingBinomial(sp500,spSize,10,
alpha0,alpha1,gamma,
5000,TRUE,FALSE)
library(Rlda)
#Read the SP500 data
data(sp500)
#Create size
spSize<-as.data.frame(matrix(100,
ncol=ncol(sp500),
nrow=nrow(sp500)))
#Set seed
set.seed(5874)
#Hyperparameters for each prior distribution
gamma <-0.01
alpha0<-0.01
alpha1<-0.01
#Execute the LDA for the Binomial entry
res<-GibbsSamplingBinomial(sp500,spSize,10,
alpha0,alpha1,gamma,
5000,TRUE,FALSE)
save.image("C:/Users/p.albuquerque/Dropbox/Projetos/P贸s-doutorado EUA/Produtos/Bayesian LDA for fuzzy clustering analysis/Vignette/Example2.Rdata.RData")
#Get the logLikelihood
ll<-res[["logLikelihood"]]
#Plot the log-likelihood
plot(ll,type="l",xlab="Interations",
ylab="Log-likelihood")
Theta<-res[["Theta"]]
#Burnout
Theta<-colMeans(Theta)
Theta<-matrix(Theta,nrow = nrow(mat1),ncol=10)
Theta<-matrix(Theta,nrow = nrow(sp500),ncol=10)
rownames(Theta)<-rownames(sp500)
View(Theta)
Phi<-res[["Phi"]]
#Bayes Estimation
Phi<-colMeans(Phi)
Phi<-matrix(Phi,nrow =10,ncol=ncol(sp500))
colnames(Phi)<-colnames(sp500)
View(Phi)
library(Rlda)
#Read the SP500 data
data(sp500)
#Create size
spSize<-as.data.frame(matrix(100,
ncol=ncol(sp500),
nrow=nrow(sp500)))
#Set seed
set.seed(5874)
#Hyperparameters for each prior distribution
gamma <-0.01
alpha0<-0.01
alpha1<-0.01
#Execute the LDA for the Binomial entry
res<-GibbsSamplingBinomial(sp500,spSize,30,
alpha0,alpha1,gamma,
5000,TRUE,FALSE)
save.image("C:/Users/p.albuquerque/Dropbox/Projetos/P贸s-doutorado EUA/Produtos/Bayesian LDA for fuzzy clustering analysis/Vignette/Example2.Rdata.RData")
#Get the logLikelihood
ll<-res[["logLikelihood"]]
#Plot the log-likelihood
plot(ll,type="l",xlab="Interations",
ylab="Log-likelihood")
#Get the Phi Estimate
Phi<-res[["Phi"]]
#Bayes Estimation
Phi<-colMeans(Phi)
#Create the matrix
Phi<-matrix(Phi,nrow =10,ncol=ncol(sp500))
#Colnames
colnames(Phi)<-colnames(sp500)
#Rownames
rownames(Phi)<-paste0("Cluster ",seq(1,30))
#Get the most likely issues
ids<-which(Phi > 0.2, arr.ind = TRUE)
View(Phi)
#Get the Phi Estimate
Phi<-res[["Phi"]]
#Bayes Estimation
Phi<-colMeans(Phi)
#Create the matrix
Phi<-matrix(Phi,nrow =30,ncol=ncol(sp500))
#Colnames
colnames(Phi)<-colnames(sp500)
#Rownames
rownames(Phi)<-paste0("Cluster ",seq(1,30))
#Get the most likely issues
ids<-which(Phi > 0.2, arr.ind = TRUE)
View(Phi)
apply(Phi,2,var)
#Selected elements
PhiSel<-Phi[ids]
matDes<-as.data.frame(cbind(rownames(Phi)[ids[,1]],colnames(Phi)[ids[,2]]))
#Names
colnames(matDes)<-c("Cluster","Issue")
#Remove text
matDes$Cluster<-trunc(as.numeric(gsub("Cluster ","",matDes$Cluster)))
#Sort
matDes <- matDes[order(matDes$Cluster, matDes$Issue),]
rownames(matDes)<-NULL
library(xtable)
tab <- xtable(matDes,digits=c(0,0,0),caption="Clusters description.")
print(tab,comment=FALSE,
include.rownames=FALSE,
size="\\fontsize{9pt}{10pt}\\selectfont")
View(matDes)
#Get the Phi Estimate
Phi<-res[["Phi"]]
#Bayes Estimation
Phi<-colMeans(Phi)
#Create the matrix
Phi<-matrix(Phi,nrow =30,ncol=ncol(sp500))
#Colnames
colnames(Phi)<-colnames(sp500)
#Rownames
rownames(Phi)<-paste0("Cluster ",seq(1,30))
#Get the most likely firms
ids<-which(Phi > 0.8, arr.ind = TRUE)
#Selected elements
PhiSel<-Phi[ids]
matDes<-as.data.frame(cbind(rownames(Phi)[ids[,1]],colnames(Phi)[ids[,2]]))
#Names
colnames(matDes)<-c("Cluster","Firm")
#Remove text
matDes$Cluster<-trunc(as.numeric(gsub("Cluster ","",matDes$Cluster)))
#Sort
matDes <- matDes[order(matDes$Cluster, matDes$Issue),]
rownames(matDes)<-NULL
library(xtable)
tab <- xtable(matDes,digits=c(0,0,0),caption="Clusters description.")
print(tab,comment=FALSE,
include.rownames=FALSE,
size="\\fontsize{9pt}{10pt}\\selectfont")
#Get the Phi Estimate
Phi<-res[["Phi"]]
#Bayes Estimation
Phi<-colMeans(Phi)
#Create the matrix
Phi<-matrix(Phi,nrow =30,ncol=ncol(sp500))
#Colnames
colnames(Phi)<-colnames(sp500)
#Rownames
rownames(Phi)<-paste0("Cluster ",seq(1,30))
#Get the most likely firms
ids<-which(Phi > 0.6, arr.ind = TRUE)
#Selected elements
PhiSel<-Phi[ids]
matDes<-as.data.frame(cbind(rownames(Phi)[ids[,1]],colnames(Phi)[ids[,2]]))
#Names
colnames(matDes)<-c("Cluster","Firm")
#Remove text
matDes$Cluster<-trunc(as.numeric(gsub("Cluster ","",matDes$Cluster)))
#Sort
matDes <- matDes[order(matDes$Cluster, matDes$Issue),]
rownames(matDes)<-NULL
library(xtable)
tab <- xtable(matDes,digits=c(0,0,0),caption="Clusters description.")
print(tab,comment=FALSE,
include.rownames=FALSE,
size="\\fontsize{9pt}{10pt}\\selectfont")
#Get the Phi Estimate
Phi<-res[["Phi"]]
#Bayes Estimation
Phi<-colMeans(Phi)
#Create the matrix
Phi<-matrix(Phi,nrow =30,ncol=ncol(sp500))
#Colnames
colnames(Phi)<-colnames(sp500)
#Rownames
rownames(Phi)<-paste0("Cluster ",seq(1,30))
#Get the most likely firms
ids<-which(Phi > 0.55, arr.ind = TRUE)
#Selected elements
PhiSel<-Phi[ids]
matDes<-as.data.frame(cbind(rownames(Phi)[ids[,1]],colnames(Phi)[ids[,2]]))
#Names
colnames(matDes)<-c("Cluster","Firm")
#Remove text
matDes$Cluster<-trunc(as.numeric(gsub("Cluster ","",matDes$Cluster)))
#Sort
matDes <- matDes[order(matDes$Cluster, matDes$Issue),]
rownames(matDes)<-NULL
library(xtable)
tab <- xtable(matDes,digits=c(0,0,0),caption="Clusters description.")
print(tab,comment=FALSE,
include.rownames=FALSE,
size="\\fontsize{9pt}{10pt}\\selectfont")
#Get the Phi Estimate
Phi<-res[["Phi"]]
#Bayes Estimation
Phi<-colMeans(Phi)
#Create the matrix
Phi<-matrix(Phi,nrow =30,ncol=ncol(sp500))
#Colnames
colnames(Phi)<-colnames(sp500)
#Rownames
rownames(Phi)<-paste0("Cluster ",seq(1,30))
#Get the most likely firms
ids<-which(Phi > 0.50, arr.ind = TRUE)
#Selected elements
PhiSel<-Phi[ids]
matDes<-as.data.frame(cbind(rownames(Phi)[ids[,1]],colnames(Phi)[ids[,2]]))
#Names
colnames(matDes)<-c("Cluster","Firm")
#Remove text
matDes$Cluster<-trunc(as.numeric(gsub("Cluster ","",matDes$Cluster)))
#Sort
matDes <- matDes[order(matDes$Cluster, matDes$Issue),]
rownames(matDes)<-NULL
library(xtable)
tab <- xtable(matDes,digits=c(0,0,0),caption="Clusters description.")
print(tab,comment=FALSE,
include.rownames=FALSE,
size="\\fontsize{9pt}{10pt}\\selectfont")
summary(Phi)
View(Phi)
apply(Phi,2,function(x) which(x==max(x)))
clus<-apply(Phi,2,function(x) which(x==max(x)))
matDes<-data.frame("Cluster"=clus,"Firm"=names(clus))
View(matDes)
colnames(matDes)<-c("Cluster","Firm")
rownames(matDes)<-NULL
library(xtable)
tab <- xtable(matDes,digits=c(0,0,0),caption="Clusters description.")
print(tab,comment=FALSE,
include.rownames=FALSE,
size="\\fontsize{9pt}{10pt}\\selectfont")
matDes <- matDes[order(matDes$Cluster, matDes$Firm),]
tab <- xtable(matDes,digits=c(0,0),caption="Clusters description.")
print(tab,comment=FALSE,
include.rownames=FALSE,
size="\\fontsize{9pt}{10pt}\\selectfont")
library(xtable)
tab <- xtable(matDes,digits=c(0,0,0),caption="Clusters description.")
print(tab,comment=FALSE,
include.rownames=FALSE,
size="\\fontsize{9pt}{10pt}\\selectfont")
clus<-apply(Phi,2,function(x) which(x==max(x) && x>0.5))
matDes<-data.frame("Cluster"=clus,"Firm"=names(clus))
#Names
colnames(matDes)<-c("Cluster","Firm")
rownames(matDes)<-NULL
#Order by cluster
matDes <- matDes[order(matDes$Cluster, matDes$Firm),]
library(xtable)
tab <- xtable(matDes,digits=c(0,0,0),caption="Clusters description.")
print(tab,comment=FALSE,
include.rownames=FALSE,
size="\\fontsize{9pt}{10pt}\\selectfont")
library(Rlda)
#Read the SP500 data
data(sp500)
#Create size
spSize<-as.data.frame(matrix(100,
ncol=ncol(sp500),
nrow=nrow(sp500)))
#Set seed
set.seed(5874)
#Hyperparameters for each prior distribution
gamma <-0.01
alpha0<-0.01
alpha1<-0.01
#Execute the LDA for the Binomial entry
res<-GibbsSamplingBinomial(sp500,spSize,10,
alpha0,alpha1,gamma,
5000,TRUE,FALSE)
save.image("C:/Users/p.albuquerque/Dropbox/Projetos/P贸s-doutorado EUA/Produtos/Bayesian LDA for fuzzy clustering analysis/Vignette/Example2.Rdata.RData")
#Get the Phi Estimate
Phi<-res[["Phi"]]
#Bayes Estimation
Phi<-colMeans(Phi)
#Create the matrix
Phi<-matrix(Phi,nrow =10,ncol=ncol(sp500))
#Colnames
colnames(Phi)<-colnames(sp500)
#Rownames
rownames(Phi)<-paste0("Cluster ",seq(1,10))
#Most likeli cluster
clus<-apply(Phi,2,function(x) which(x==max(x) && x>0.5))
matDes<-data.frame("Cluster"=clus,"Firm"=names(clus))
#Names
colnames(matDes)<-c("Cluster","Firm")
rownames(matDes)<-NULL
#Order by cluster
matDes <- matDes[order(matDes$Cluster, matDes$Firm),]
library(xtable)
tab <- xtable(matDes,digits=c(0,0,0),caption="Clusters and Firms")
print(tab,comment=FALSE,
include.rownames=FALSE,
size="\\fontsize{9pt}{10pt}\\selectfont")
clus<-apply(Phi,2,function(x) which(x==max(x) && x>0.5))
clus<-apply(Phi,2,function(x) which(x==max(x)))
matDes<-data.frame("Cluster"=clus,"Firm"=names(clus))
#Names
colnames(matDes)<-c("Cluster","Firm")
rownames(matDes)<-NULL
#Order by cluster
matDes <- matDes[order(matDes$Cluster, matDes$Firm),]
library(xtable)
tab <- xtable(matDes,digits=c(0,0,0),caption="Clusters and Firms")
print(tab,comment=FALSE,
include.rownames=FALSE,
size="\\fontsize{9pt}{10pt}\\selectfont")
library(Rlda)
library(Rlda)
library(PresenceAbsence)
#Read the SP500 data
data(SPDATA)
PresAbs<-SPDATA[,1:2]
#Location
library(data.table)
PresAbs <- data.table(PresAbs)
PresAbs[, Location := sequence(.N), by = c("SPECIES")]
#Create the binary matrix
library(reshape2)
mat1<-dcast(PresAbs,
Location~SPECIES,
value.var="OBSERVED")
#Remove the Location variable
matPres<-as.data.frame(mat1[,-1])
#Set seed
set.seed(9842)
#Hyperparameters for each prior distribution
gamma <-0.01
alpha0<-0.01
alpha1<-0.01
#Execute the LDA for the Binomial entry
res<-GibbsSamplingPresence(matPres,10,
alpha0,alpha1,gamma,
5000,TRUE,FALSE)
save.image("C:/Users/p.albuquerque/Dropbox/Projetos/P贸s-doutorado EUA/Produtos/Bayesian LDA for fuzzy clustering analysis/Vignette/Example3.Rdata.RData")
#Get the logLikelihood
ll<-res[["logLikelihood"]]
#Plot the log-likelihood
plot(ll,type="l",xlab="Interations",
ylab="Log-likelihood")
#Get the logLikelihood
ll<-res[["logLikelihood"]]
#Plot the log-likelihood
plot(ll[,1000:5000],type="l",xlab="Interations",
ylab="Log-likelihood")
plot(ll[1000:5000],type="l",xlab="Interations",
ylab="Log-likelihood")
#Get the logLikelihood
ll<-res[["logLikelihood"]]
pdf("plot003.pdf", width=4, height=3)
#Plot the log-likelihood
plot(ll[1000:5000],type="l",xlab="Interations",ylab="Log-likelihood",
cex.lab=0.7,cex.axis=0.7, cex.main=0.7, cex.sub=0.7)
invisible(dev.off())
#Get the Theta Estimate
Theta<-res[["Theta"]]
#Burnout
Theta<-colMeans(Theta[1000:5000,])
#Create the matrix
Theta<-matrix(Theta,nrow = nrow(matPres),ncol=10)
#Rownames
rownames(Theta)<-rownames(matPres)
Theta<-colMeans(Theta[1000:5000,])
Theta<-res[["Theta"]]
Theta<-colMeans(Theta[1000:5000,])
Theta<-matrix(Theta,nrow = nrow(matPres),ncol=10)
Theta<-res[["Theta"]]
ncol(Theta)
nrow(Theta)
#Get the Theta Estimate
Theta<-res[["Theta"]]
#Burnout
Theta<-colMeans(Theta[1000:5000,])
#Create the matrix
Theta<-matrix(Theta,nrow = ncol(matPres),ncol=10)
View(Theta)
stars(Theta)
#Get the Theta Estimate
Theta<-res[["Theta"]]
#Burnout
Theta<-colMeans(Theta[1000:5000,])
#Create the matrix
Theta<-matrix(Theta,nrow = ncol(matPres),ncol=10)
#Rownames
rownames(Theta)<-paste("Specie ",seq(1,nrow(Theta)))
colnames(Theta)<-paste("Cluster ",seq(1,ncol(Theta)))
View(Theta)
stars(Theta)
library(RColorBrewer)
myColor<-brewer.pal(n = 10, name = "RdBu")
stars(Theta,col.segments=myColor)
stars(Theta,col.segments=myColor,draw.segments=TRUE)
help(stars)
stars(Theta,col.segments=myColor,scale=FALSE,draw.segments=TRUE)
stars(Theta,col.segments=myColor,scale=TRUE,draw.segments=TRUE)
stars(Theta,col.segments=myColor,scale=FALSE,draw.segments=TRUE)
stars(Theta,col.segments=myColor,scale=TRUE,draw.segments=TRUE)
stars(Theta,col.segments=myColor,scale=TRUE,draw.segments=TRUE,ncol=5)
stars(Theta,col.segments=myColor,scale=TRUE,draw.segments=TRUE,ncol=3)
stars(Theta,col.segments=myColor,scale=TRUE,draw.segments=TRUE,ncol=4)
View(matPres)
colnames(Theta)<-colnames(matPres)
rownames(Theta)<-colnames(matPres)
colnames(Theta)<-paste("Cluster ",seq(1,ncol(Theta)))
#Color
library(RColorBrewer)
myColor<-brewer.pal(n = 10, name = "RdBu")
stars(Theta,col.segments=myColor,scale=TRUE,draw.segments=TRUE,ncol=4)
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,label=as.character(rownames(Theta)))
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE)
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
strClusters<-as.character(colnames(Theta))
strClusters<-as.character(colnames(Theta))
stars(Theta,col.segments=myColor,scale=TRUE,label=strClusters,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend('top',inset=c(0,-0.03),strClusters,ncol=5,fill=pal,cex=0.6,bty='n',x.intersp=0.3)
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend('top',inset=c(0,-0.03),strClusters,ncol=5,fill=myColor,cex=0.6,bty='n',x.intersp=0.3)
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend('bottom',inset=c(0,-0.03),strClusters,ncol=5,fill=myColor,cex=0.6,bty='n',x.intersp=0.3)
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend('bottom',inset=c(1,-0.03),strClusters,ncol=5,fill=myColor,cex=0.6,bty='n',x.intersp=0.3)
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend('bottom',inset=c(-2,-0.03),strClusters,ncol=5,fill=myColor,cex=0.6,bty='n',x.intersp=0.3)
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend('bottom',inset=c(+2,-0.03),strClusters,ncol=5,fill=myColor,cex=0.6,bty='n',x.intersp=0.3)
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend('bottom',inset=c(0,0),strClusters,ncol=5,fill=myColor,cex=0.6,bty='n',x.intersp=0.3)
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend('bottom',inset=c(0.4,0),strClusters,ncol=5,fill=myColor,cex=0.6,bty='n',x.intersp=0.3)
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend('bottom',inset=c(0.4,0),strClusters,ncol=5,
fill=myColor,cex=0.6,bty='n')
help("legend")
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend(2.8,0,'bottom',inset=c(0.4,0),strClusters,ncol=5,
fill=myColor,cex=0.6,bty='n')
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend(0.3,0,'bottom',inset=c(0.4,0),strClusters,ncol=5,
fill=myColor,cex=0.6,bty='n')
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend(0.1,0,'bottom',inset=c(0.4,0),strClusters,ncol=5,
fill=myColor,cex=0.6,bty='n')
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend('bottom',inset=c(0.4,0),strClusters,ncol=5,
fill=myColor,cex=0.6,bty='n')
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend('bottomright',inset=c(0.4,0),strClusters,ncol=5,
fill=myColor,cex=0.6,bty='n')
stars(Theta,col.segments=myColor,scale=TRUE,
draw.segments=TRUE,ncol=4,flip.labels=FALSE,cex=0.6)
legend('bottomright',strClusters,ncol=5,
fill=myColor,cex=0.6,bty='n')
library(Rlda)
help(pgamma)
